#!/usr/bin/env python3
"""
Git commit-msg hook to validate commit message format.

Valid formats:
- feat: Add new feature
- fix: Bug fix
- docs: Documentation changes
- test: Add/modify tests
- refactor: Code refactoring
- chore: Maintenance tasks
"""

import re
import sys
from typing import List, Pattern

# Valid commit types
VALID_TYPES = {
    'feat': 'Add new feature',
    'fix': 'Bug fix',
    'docs': 'Documentation changes',
    'test': 'Add/modify tests',
    'refactor': 'Code refactoring',
    'chore': 'Maintenance tasks',
}

# Commit message format: type: description
COMMIT_PATTERN: Pattern = re.compile(
    r'^(feat|fix|docs|test|refactor|chore):\s+.+$'
)

def validate_commit_msg(msg_file: str) -> bool:
    """Validate commit message format.
    
    Args:
        msg_file: Path to commit message file
        
    Returns:
        True if valid, False otherwise
    """
    try:
        with open(msg_file, 'r') as f:
            # Get first line (subject)
            subject = f.readline().strip()
            
        # Skip merge commits
        if subject.startswith('Merge'):
            return True
            
        if not COMMIT_PATTERN.match(subject):
            print('Error: Invalid commit message format!')
            print('Commit message must start with one of:')
            for type_, desc in VALID_TYPES.items():
                print(f'  {type_}: {desc}')
            print('\nExample: feat: Add user authentication')
            return False
            
        return True
        
    except Exception as e:
        print(f'Error reading commit message: {e}')
        return False

def main(argv: List[str]) -> int:
    """Main entry point.
    
    Args:
        argv: Command line arguments
        
    Returns:
        Exit code (0 for success, 1 for failure)
    """
    if len(argv) != 2:
        print(f'Usage: {argv[0]} <commit-msg-file>')
        return 1
        
    return 0 if validate_commit_msg(argv[1]) else 1

if __name__ == '__main__':
    sys.exit(main(sys.argv))
